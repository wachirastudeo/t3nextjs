// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum LeaveStatus {
    PENDING
    APPROVED
    REJECTED
}

enum Role {
    ADMIN
    MANAGER
    MEMBER
}

model User {
    id            Int            @id @default(autoincrement())
    name          String
    email         String         @unique
    image         String?
    password      String
    role          Role           @default(MEMBER)
    createAt      DateTime       @default(now())
    updateAt      DateTime       @default(now())
    leaves        Leave[] // user มีได้หลาย leave
    articles      Article[] // article 
    announcements Announcement[]
}

model Leave {
    id              Int         @id @default(autoincrement())
    status          LeaveStatus @default(PENDING)
    reason          String
    leaveDate       String
    rejectionReason String?
    userId          Int
    createAt        DateTime    @default(now())
    updateAt        DateTime    @default(now())
    user            User        @relation(fields: [userId], references: [id]) // โยงความสัมพันธ์ไปยัง user ผ่าน userId เค้ากับ id

    @@unique([userId, leaveDate]) // user คนเดิมไม่สามารถสร้างวันลาซ้ำกันได้
}

model Article {
    id       Int      @id @default(autoincrement())
    title    String
    slug     String   @unique
    excerpt  String
    content  String
    image    String
    userId   Int
    createAt DateTime @default(now())
    updateAt DateTime @default(now())
    user     User     @relation(fields: [userId], references: [id])
}

model Announcement {
    id       Int      @id @default(autoincrement())
    title    String
    slug     String   @unique
    excerpt  String
    content  String
    userId   Int
    createAt DateTime @default(now())
    updateAt DateTime @default(now())
    user     User     @relation(fields: [userId], references: [id])
}
